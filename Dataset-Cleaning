{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6442483,"sourceType":"datasetVersion","datasetId":3620291}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/phenomsg/dataset-cleaning?scriptVersionId=243850900\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# LinkedIn Professional Profiles Dataset\n\n- **Dataset URL:** [LinkedIn Professional Profiles Dataset on Kaggle](https://www.kaggle.com/datasets/manishkumar7432698/linkedinuserprofiles/data)  \n- **Creator:** [Manish Kumar](https://www.kaggle.com/manishkumar7432698)\n\nThis dataset contains user profile information sourced from LinkedIn, including details such as professional roles, skills, education, and more. \nIt can be valuable for data analysis, machine learning applications, and insights into career paths.\n","metadata":{"execution":{"iopub.status.busy":"2025-06-05T05:24:25.10381Z","iopub.execute_input":"2025-06-05T05:24:25.104205Z","iopub.status.idle":"2025-06-05T05:24:25.113257Z","shell.execute_reply.started":"2025-06-05T05:24:25.104179Z","shell.execute_reply":"2025-06-05T05:24:25.111475Z"}}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.639951Z","iopub.execute_input":"2025-06-05T09:20:20.64025Z","iopub.status.idle":"2025-06-05T09:20:20.644569Z","shell.execute_reply.started":"2025-06-05T09:20:20.640229Z","shell.execute_reply":"2025-06-05T09:20:20.643665Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.669904Z","iopub.execute_input":"2025-06-05T09:20:20.670189Z","iopub.status.idle":"2025-06-05T09:20:20.70626Z","shell.execute_reply.started":"2025-06-05T09:20:20.670169Z","shell.execute_reply":"2025-06-05T09:20:20.705305Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ppl_profile = r'/kaggle/input/linkedinuserprofiles/LinkedIn people profiles datasets.csv'\ncmpny_profile = r'/kaggle/input/linkedinuserprofiles/LinkedIn company information datasets (Public web data).csv'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.707606Z","iopub.execute_input":"2025-06-05T09:20:20.708001Z","iopub.status.idle":"2025-06-05T09:20:20.712024Z","shell.execute_reply.started":"2025-06-05T09:20:20.707975Z","shell.execute_reply":"2025-06-05T09:20:20.711043Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv(cmpny_profile)\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.77Z","iopub.execute_input":"2025-06-05T09:20:20.770312Z","iopub.status.idle":"2025-06-05T09:20:20.901794Z","shell.execute_reply.started":"2025-06-05T09:20:20.770288Z","shell.execute_reply":"2025-06-05T09:20:20.900928Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cols = df.columns\nprint(len(df.columns))\nprint(df.shape)        # rows , cols\ncols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.903377Z","iopub.execute_input":"2025-06-05T09:20:20.903648Z","iopub.status.idle":"2025-06-05T09:20:20.910895Z","shell.execute_reply.started":"2025-06-05T09:20:20.903627Z","shell.execute_reply":"2025-06-05T09:20:20.910097Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.size","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.911861Z","iopub.execute_input":"2025-06-05T09:20:20.912103Z","iopub.status.idle":"2025-06-05T09:20:20.918256Z","shell.execute_reply.started":"2025-06-05T09:20:20.912084Z","shell.execute_reply":"2025-06-05T09:20:20.91751Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Dropping Unnecessary Columns\n\nTo streamline the dataset and remove redundant or non-informative features, the following columns were dropped:\n\n| Column Name       | Reason for Removal                                                                 |\n|-------------------|--------------------------------------------------------------------------------------|\n| `locations`        | Duplicate of `formatted_locations`, which already provides cleaned location data.  |\n| `crunchbase_url`   | Contains mostly null values; offers no analytical benefit.                         |\n| `employees`        | Broken Links.                |\n| `funding`          | All values are null.                                                               |\n| `stock_info`       | All values are null.                                                               |\n| `investors`        | All values are null.                                                               |\n| `affiliated`       | Lacks useful information and contains mostly null or irrelevant data.              |\n| `similar`          | Not required for current analysis and largely uninformative.      ","metadata":{}},{"cell_type":"code","source":"columns_to_drop = ['locations', 'crunchbase_url', 'employees', 'funding', 'stock_info', 'investors','affiliated','similar']\ndf_dropped = df.drop(columns=columns_to_drop)\nprint(df_dropped.shape)\ndf_dropped.head(5)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.919326Z","iopub.execute_input":"2025-06-05T09:20:20.919665Z","iopub.status.idle":"2025-06-05T09:20:20.942201Z","shell.execute_reply.started":"2025-06-05T09:20:20.919634Z","shell.execute_reply":"2025-06-05T09:20:20.941245Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Checking out of bounds errors","metadata":{"execution":{"iopub.status.busy":"2025-06-05T08:19:21.309281Z","iopub.execute_input":"2025-06-05T08:19:21.309626Z","iopub.status.idle":"2025-06-05T08:19:21.314786Z","shell.execute_reply.started":"2025-06-05T08:19:21.309607Z","shell.execute_reply":"2025-06-05T08:19:21.313556Z"}}},{"cell_type":"code","source":"print(df_dropped.isin([np.inf, -np.inf]).any())  # Shows columns with infinite values\nprint(df_dropped.isnull().sum())  # Shows NaN counts per column","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.944244Z","iopub.execute_input":"2025-06-05T09:20:20.944608Z","iopub.status.idle":"2025-06-05T09:20:20.959397Z","shell.execute_reply.started":"2025-06-05T09:20:20.944585Z","shell.execute_reply":"2025-06-05T09:20:20.958478Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# NaN counts\nnan_counts = df_dropped.isnull().sum()\n\n# columns with NaN values\nnan_counts = nan_counts[nan_counts > 0]\n\n# Print NaN summary\nprint(\"NaN counts per column:\")\nprint(nan_counts)\n\n# Plt\nplt.figure(figsize=(12, 6))\nsns.barplot(x=nan_counts.index, y=nan_counts.values, palette='coolwarm')\nplt.title('NaN Values per Column')\nplt.ylabel('Count of NaNs')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:20.960283Z","iopub.execute_input":"2025-06-05T09:20:20.960626Z","iopub.status.idle":"2025-06-05T09:20:21.246282Z","shell.execute_reply.started":"2025-06-05T09:20:20.960606Z","shell.execute_reply":"2025-06-05T09:20:21.245225Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Handling Missing Values (NaNs)\n\nThe dataset contains several columns with missing values. Here's the plan to clean and preserve the data meaningfully:\n\n| Column                   | Missing Count | Action                                                                  |\n|--------------------------|---------------|-------------------------------------------------------------------------|\n| `updates`                | 509           | Fill with **\"Not available\"** placeholder to preserve the information |\n| `slogan`                 | 222           | Fill with **\"Not available\"** placeholder                             |\n| `specialties`            | 235           | Fill with **\"Not available\"** placeholder                             |\n| `website`                | 31            | Fill with **\"Not available\"** placeholder                             |\n| `organization_type`      | 70            | Fill with **\"Not available\"** placeholder                             |\n| `founded`                | 4             | Filling with a default like **0** or **\"unknown year\"**       |\n| `about`                  | 2             | Fill with **\"Not available\"** placeholder                             |\n| `employees_in_linkedin`  | 153           | Fill with mean        |\n| `headquarters`           | 1             | Fill with **\"Not available\"** placeholder                             |\n| `country_code`           | 1             | Fill with **\"Not available\"** placeholder                             |\n","metadata":{}},{"cell_type":"code","source":"placeholder = 'Not available'\ncolumns_to_fill = [\n    'updates', 'slogan', 'specialties', 'website', \n    'organization_type', 'about', 'headquarters', 'country_code'\n]\n\ndf_dropped[columns_to_fill] = df_dropped[columns_to_fill].fillna(placeholder)\ndf_dropped.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:21.247415Z","iopub.execute_input":"2025-06-05T09:20:21.247755Z","iopub.status.idle":"2025-06-05T09:20:21.273984Z","shell.execute_reply.started":"2025-06-05T09:20:21.247724Z","shell.execute_reply":"2025-06-05T09:20:21.27309Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_dropped['founded'] = df_dropped['founded'].fillna(0)\ndf_dropped.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:21.276265Z","iopub.execute_input":"2025-06-05T09:20:21.276588Z","iopub.status.idle":"2025-06-05T09:20:21.300185Z","shell.execute_reply.started":"2025-06-05T09:20:21.276564Z","shell.execute_reply":"2025-06-05T09:20:21.299144Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# integer mean -> employees cannot be float\nmeanz = df_dropped['employees_in_linkedin'].mean()\nint_meanz = int(round(meanz))\n\ndf_dropped['employees_in_linkedin'] = df_dropped['employees_in_linkedin'].fillna(int_meanz).astype(int)\ndf_dropped.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:21.301208Z","iopub.execute_input":"2025-06-05T09:20:21.301531Z","iopub.status.idle":"2025-06-05T09:20:21.324677Z","shell.execute_reply.started":"2025-06-05T09:20:21.301508Z","shell.execute_reply":"2025-06-05T09:20:21.323871Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Changing Values of `company_size`\n\nPreviously, the `company_size` column contained string-based ranges such as:\n\n- `\"1-10 employees\"`\n- `\"51-200 employees\"`\n- `\"1,001-5,000 employees\"`\n- `\"10,001+ employees\"`\n\nThese textual ranges are inconsistent and difficult to analyze quantitatively. \nTo improve data usability and modeling readiness, I have replaced these string ranges by classifying companies into **three size categories** based on the number of employees listed in the `employees_in_linkedin` column:\n\n### Classification Logic\n\n| Employees in LinkedIn | Category |\n|------------------------|----------|\n| Less than 100          | `Small`  |\n| 100 to 500             | `Mid`    |\n| More than 500          | `Large`  |\n\nThis transformation results in a cleaner, standardized `company_size` column that supports analysis and visualization more effectively.","metadata":{}},{"cell_type":"code","source":"def func(emp_count):\n    if emp_count < 100:\n        return 'Small'\n    elif emp_count <= 500:\n        return 'Mid'\n    else:\n        return 'Large'\n\ndf_dropped['company_size'] = df_dropped['employees_in_linkedin'].apply(func)\ndf_dropped.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:21.325554Z","iopub.execute_input":"2025-06-05T09:20:21.325997Z","iopub.status.idle":"2025-06-05T09:20:21.348816Z","shell.execute_reply.started":"2025-06-05T09:20:21.325966Z","shell.execute_reply":"2025-06-05T09:20:21.347759Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Changing Column Names for Better Understanding\n\nTo improve the clarity and readability of the dataset, some column names are renamed.\n\n### Renamed Columns\n\n| Old Column Name           | New Column Name |\n|---------------------------|------------------|\n| `formatted_locations`     | `location`       |\n| `employees_in_linkedin`   | `employees`      |","metadata":{}},{"cell_type":"code","source":"df_dropped = df_dropped.rename(columns={\n    'formatted_locations': 'location',\n    'employees_in_linkedin': 'employees'\n})\ndf_dropped.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:20:21.350428Z","iopub.execute_input":"2025-06-05T09:20:21.350736Z","iopub.status.idle":"2025-06-05T09:20:21.371418Z","shell.execute_reply.started":"2025-06-05T09:20:21.350713Z","shell.execute_reply":"2025-06-05T09:20:21.370379Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Saving cleaned datset","metadata":{}},{"cell_type":"code","source":"df_dropped.to_csv('/kaggle/working/cleaned_company_data.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-05T09:22:24.994938Z","iopub.execute_input":"2025-06-05T09:22:24.995316Z","iopub.status.idle":"2025-06-05T09:22:25.126423Z","shell.execute_reply.started":"2025-06-05T09:22:24.995289Z","shell.execute_reply":"2025-06-05T09:22:25.125531Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}